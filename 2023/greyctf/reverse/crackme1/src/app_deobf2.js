'use strict';

var dico = [
    "bindTransformFeedback",
    "createElement",
    "40865qozUos",
    "286guTpAq",
    "activeTexture",
    "1412856CuNLHL",
    "7iETngL",
    "linkProgram",
    "attachShader",
    "canvas",
    "TRANSFORM_FEEDBACK",
    "viewport",
    "generateMipmap",
    "#flag",
    "querySelector",
    "src",
    "a_position",
    "createProgram",
    "log",
    "push",
    "textInput",
    "texImage2D",
    "createBuffer",
    "24695GHmWxv",
    "#version 300 es\n\nin vec4 a_position;\nout vec2 v_texcoord;\n\n// all shaders have a main function\nvoid main() {\n\n  // gl_Position is a special variable a vertex shader\n  // is responsible for setting\n  gl_Position = a_position;\n  v_texcoord.x = (gl_Position.x + 1.0f) / 2.0f;\n  v_texcoord.y = -(gl_Position.y + 1.0f) / 2.0f;\n}\n",
    "startsWith",
    "compileShader",
    "RGBA",
    "#version 300 es\n\nuniform vec4 s;\n\nin float a;\nin float b;\nin float c;\nin float d;\nin float e;\n\nout float f;\n\nvoid main() {\n  f = (a * d + b + c * e) * (step(0.0f, -abs(s.z)));\n}\n",
    "thonk.png",
    "bindBufferBase",
    "TEXTURE_WRAP_S",
    "deleteProgram",
    "createShader",
    "3398536yTzYal",
    "enableVertexAttribArray",
    "TEXTURE_2D",
    "getUniformLocation",
    "LINK_STATUS",
    "NEAREST",
    "charCodeAt",
    "VERTEX_SHADER",
    "115729dJqjLi",
    "transformFeedbackVaryings",
    "fromCharCode",
    "ARRAY_BUFFER",
    "STATIC_DRAW",
    "COLOR_BUFFER_BIT",
    "bufferData",
    "getProgramParameter",
    "FRAGMENT_SHADER",
    "vertexAttribPointer",
    "textContent",
    "11392452WoAIUJ",
    "drawArrays",
    "UNSIGNED_BYTE",
    "createTexture",
    "COMPILE_STATUS",
    "bindTexture",
    "bindBuffer",
    "useProgram",
    "round",
    "resizeCanvasToDisplaySize",
    "addEventListener",
    "TEXTURE_MIN_FILTER",
    "webgl2",
    "bindVertexArray",
    "getAttribLocation",
    "FLOAT",
    "fill",
    "length",
    "7970WJoyDR",
    "clearColor",
    "24555sMhSaO",
    "774iHtBiv",
    "click",
    "height",
    "CLAMP_TO_EDGE",
    "TEXTURE_MAG_FILTER",
    "submitButton",
    "getContext",
    "getShaderParameter",
    "getElementById",
    "POINTS",
    "TRIANGLES",
    "#version 300 es\nprecision highp float;\n\nout vec4 outColor;\nvoid main() {\n  outColor = vec4(0.0f, 1.0f, 0.0f, 1.0f);\n}\n",
    "TEXTURE0",
    "createTransformFeedback",
    "uniform4fv",
    "texParameteri",
    "noentry.jpg",
    "load"
];

function dico_shift(i) {
    return dico[i - 0x171];
}

// Juste a kind of checksum, maybe to prevent us from modifying some stuff
(function() {
    while (!![]) {
        try {
            var _0x1b2964 = parseInt(dico_shift(0x19b)) / 0x1 + -parseInt(dico_shift(0x174)) / 0x2 * (parseInt(dico_shift(0x1ba)) / 0x3) + parseInt(dico_shift(0x176)) / 0x4 + -parseInt(dico_shift(0x188)) / 0x5 * (parseInt(dico_shift(0x1bb)) / 0x6) + parseInt(dico_shift(0x177)) / 0x7 * (parseInt(dico_shift(0x193)) / 0x8) + -parseInt(dico_shift(0x1a6)) / 0x9 + parseInt(dico_shift(0x1b8)) / 0xa * (parseInt(dico_shift(0x173)) / 0xb);
            if (_0x1b2964 === 781201) break; // should be true
            else dico['push'](dico['shift']()); 
        } catch (_0x2875c0) {
            dico['push'](dico['shift']());
        }
    }
}());


const code_gl1 = '#version 300 es\n\nuniform vec4 s;\n\nin float a;\nin float b;\nin float c;\nin float d;\nin float e;\n\nout float f;\n\nvoid main() {\n  f = (a * d + b + c * e) * (step(0.0f, -abs(s.z)));\n}\n',
      code_gl2 = '#version 300 es\nprecision highp float;\n\nout vec4 outColor;\nvoid main() {\n  outColor = vec4(0.0f, 1.0f, 0.0f, 1.0f);\n}\n',
      code_gl3 = '#version 300 es\n\nin vec4 a_position;\nout vec2 v_texcoord;\n\n// all shaders have a main function\nvoid main() {\n\n  // gl_Position is a special variable a vertex shader\n  // is responsible for setting\n  gl_Position = a_position;\n  v_texcoord.x = (gl_Position.x + 1.0f) / 2.0f;\n  v_texcoord.y = -(gl_Position.y + 1.0f) / 2.0f;\n}\n',
      code_gl4 = '#version\x20300\x20es\x0a\x0a//\x20fragment\x20shaders\x20don\x27t\x20have\x20a\x20default\x20precision\x20so\x20we\x20need\x0a//\x20to\x20pick\x20one.\x20highp\x20is\x20a\x20good\x20default.\x20It\x20means\x20\x22high\x20precision\x22\x0aprecision\x20highp\x20float;\x0a\x0ain\x20vec2\x20v_texcoord;\x0auniform\x20sampler2D\x20u_texture;\x0a\x0aout\x20vec4\x20outColor;\x0a\x0avoid\x20main()\x20{\x0a\x20\x20outColor\x20=\x20texture(u_texture,\x20v_texcoord);\x0a}\x0a',
      context_canvas = document['createElement']('canvas')['getContext']('webgl2');
      context_query_c = document['querySelector']('#c')['getContext']('webgl2');

webglUtils['resizeCanvasToDisplaySize'](context_query_c['canvas']);
context_query_c['viewport'](0x0, 0x0, context_query_c['canvas']['width'], context_query_c['canvas']['height']);

function create_shader(ctx_canvas, shader, code_gl) {
    const created_shader = ctx_canvas['createShader'](shader);
    ctx_canvas['shaderSource'](created_shader, code_gl), ctx_canvas['compileShader'](created_shader);
    if (!ctx_canvas['getShaderParameter'](created_shader, ctx_canvas['COMPILE_STATUS']))
	throw new Error(ctx_canvas['getShaderInfoLog'](created_shader));
    return created_shader;
}

function create_program(ctx_canvas, shader1, shader2) {
    var created_prog = ctx_canvas['createProgram']();
    ctx_canvas['attachShader'](created_prog, shader1);
    ctx_canvas['attachShader'](created_prog, shader2);
    ctx_canvas['linkProgram'](created_prog);
    var _0x34ae3c = ctx_canvas['getProgramParameter'](created_prog, ctx_canvas['LINK_STATUS']);
    if (_0x34ae3c) return created_prog;
    return console['log'](ctx_canvas['getProgramInfoLog'](created_prog)), ctx_canvas['deleteProgram'](created_prog), undefined;
}

function init_buffer(ctx_canvas, data) {
    const _0x224a76 = ctx_canvas['createBuffer']();
    return ctx_canvas['bindBuffer'](ctx_canvas['ARRAY_BUFFER'], _0x224a76), ctx_canvas['bufferData'](ctx_canvas['ARRAY_BUFFER'], data, ctx_canvas['STATIC_DRAW']), _0x224a76;
}

function init_buffer_vertex(ctx_canvas, array_values, param_name) {
    const _0x5c5368 = init_buffer(ctx_canvas, array_values);
    ctx_canvas['enableVertexAttribArray'](param_name);
    ctx_canvas['vertexAttribPointer'](param_name, 0x1, ctx_canvas['FLOAT'], ![], 0x0, 0x0);
}

const shader1 = create_shader(context_canvas, context_canvas['VERTEX_SHADER'], code_gl1),
      shader2 = create_shader(context_canvas, context_canvas['FRAGMENT_SHADER'], code_gl2),
      program12 = context_canvas['createProgram']();

context_canvas['attachShader'](program12, shader1);
context_canvas['attachShader'](program12, shader2);
context_canvas['transformFeedbackVaryings'](program12, ['f'], context_canvas['SEPARATE_ATTRIBS']);
context_canvas['linkProgram'](program12);

if (!context_canvas['getProgramParameter'](program12, context_canvas['LINK_STATUS']))
    throw new Error(context_canvas['getProgramParameter'](program12));
const a_shader = context_canvas['getAttribLocation'](program12, 'a'),
      b_shader = context_canvas['getAttribLocation'](program12, 'b'),
      c_shader = context_canvas['getAttribLocation'](program12, 'c'),
      d_shader = context_canvas['getAttribLocation'](program12, 'd'),
      e_shader = context_canvas['getAttribLocation'](program12, 'e'),
      s_shader = context_canvas['getUniformLocation'](program12, 's'),
      _0x37ea82 = context_canvas['createVertexArray']();

context_canvas['bindVertexArray'](_0x37ea82);
var shader3 = create_shader(context_query_c, context_query_c['VERTEX_SHADER'], code_gl3),
    shader4 = create_shader(context_query_c, context_query_c['FRAGMENT_SHADER'], code_gl4),
    program34 = create_program(context_query_c, shader3, shader4),
    _0x29e7ae = context_query_c['getAttribLocation'](program34, 'a_position'),
    _0x56ee60 = context_query_c['createBuffer']();

context_query_c['bindBuffer'](context_query_c['ARRAY_BUFFER'], _0x56ee60);
var _0x3e48db = [0x1, -0x1, -0x1, -0x1, -0x1, 0x1, -0x1, 0x1, 0x1, -0x1, 0x1, 0x1];
context_query_c['bufferData'](context_query_c['ARRAY_BUFFER'], new Float32Array(_0x3e48db), context_query_c['STATIC_DRAW']);
var _0x5745db = context_query_c['createVertexArray']();
context_query_c['bindVertexArray'](_0x5745db), context_query_c['enableVertexAttribArray'](_0x29e7ae);
var _0x288b88 = 0x2,
    _0xe0eefa = context_query_c['FLOAT'],
    _0x22a8e6 = ![],
    _0x38a39a = 0x0,
    _0x2cdd83 = 0x0;

context_query_c['vertexAttribPointer'](_0x29e7ae, _0x288b88, _0xe0eefa, _0x22a8e6, _0x38a39a, _0x2cdd83);
var _0x56d2d3 = context_query_c['createTexture']();
context_query_c['bindTexture'](context_query_c['TEXTURE_2D'], _0x56d2d3);
context_query_c['texImage2D'](context_query_c['TEXTURE_2D'], 0x0, context_query_c['RGBA'], 0x1, 0x1, 0x0, context_query_c['RGBA'], context_query_c['UNSIGNED_BYTE'], new Uint8Array([0x0, 0xb4, 0xff, 0xff]));

var thonk_image = new Image();
thonk_image['src'] = 'thonk.png';
thonk_image['addEventListener']('load', function() {
    context_query_c['bindTexture'](context_query_c['TEXTURE_2D'], _0x56d2d3);
    context_query_c['texImage2D'](context_query_c['TEXTURE_2D'], 0x0, context_query_c['RGBA'], context_query_c['RGBA'], context_query_c['UNSIGNED_BYTE'], thonk_image);
    context_query_c['generateMipmap'](context_query_c['TEXTURE_2D']), context_query_c['useProgram'](program);
    var _0xdb67ac = context_query_c['TRIANGLES'],
        _0x2506c5 = 0x0,
        _0x21db03 = 0x6;
    context_query_c['drawArrays'](_0xdb67ac, _0x2506c5, _0x21db03);
});

var array_images = [context_query_c['createTexture'](), context_query_c['createTexture']()],
    _0x3d5c0d = context_query_c['createTexture'](),
    bad_image = new Image();

bad_image['src'] = 'noentry.jpg';
bad_image['addEventListener']('load', function() {
    context_query_c['bindTexture'](context_query_c['TEXTURE_2D'], array_images[0x0]);
    context_query_c['texImage2D'](context_query_c['TEXTURE_2D'], 0x0, context_query_c['RGBA'], context_query_c['RGBA'], context_query_c['UNSIGNED_BYTE'], bad_image);
    context_query_c['generateMipmap'](context_query_c['TEXTURE_2D']);
});

var good_image = new Image();
good_image['src'] = 'good.png';
good_image['addEventListener']('load', function() {
    context_query_c['bindTexture'](context_query_c['TEXTURE_2D'], array_images[0x1]);
    context_query_c['texImage2D'](context_query_c['TEXTURE_2D'], 0x0, context_query_c['RGBA'], context_query_c['RGBA'], context_query_c['UNSIGNED_BYTE'], good_image);
    context_query_c['generateMipmap'](context_query_c['TEXTURE_2D']);
});
const matrix1 = [
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x0, 0x0, 0x0, 0x0],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1],
        [0x1, 0x0, 0x1, 0x1]
    ],
    matrix2 = [
        [0xe5, 0x0, 0x0, 0x0],
        [0xf4, 0x0, 0x0, 0x0],
        [0xf8, 0x0, 0x0, 0x0],
        [0x3d, 0x0, 0x0, 0x0],
        [0x26, 0x0, 0x0, 0x0],
        [0x5, 0x0, 0x0, 0x0],
        [0xf1, 0x0, 0x0, 0x0],
        [0x29, 0x0, 0x0, 0x0],
        [0x43, 0x0, 0x0, 0x0],
        [0x6, 0x0, 0x0, 0x0],
        [0x5d, 0x0, 0x0, 0x0],
        [0x54, 0x0, 0x0, 0x0],
        [0xc2, 0x0, 0x0, 0x0],
        [0xf2, 0x0, 0x0, 0x0],
        [0x6, 0x0, 0x0, 0x0],
        [0x71, 0x0, 0x0, 0x0],
        [0xb5, 0x0, 0x0, 0x0],
        [0xd5, 0x0, 0x0, 0x0],
        [0x46, 0x0, 0x0, 0x0],
        [0x21, 0x0, 0x0, 0x0],
        [0xcc, 0x0, 0x0, 0x0],
        [0x2, 0x0, 0x0, 0x0],
        [0x80, 0x0, 0x0, 0x0],
        [0x95, 0x0, 0x0, 0x0],
        [0x42, 0x0, -0x45, 0x3],
        [0xda, 0x0, 0x0, 0x0],
        [0x53, 0x0, 0x0, 0x0],
        [0x61, 0x0, 0x0, 0x0],
        [-0x10, 0x0, 0x0, 0x0],
        [0x22, 0x0, 0x0, 0x0],
        [0xdd, 0x0, 0x0, 0x0],
        [0x50, 0x0, 0x0, 0x0],
        [0x90, 0x0, 0x0, 0x0],
        [0x28, 0x0, 0x0, 0x0],
        [0x66, 0x0, 0x0, 0x0],
        [0x6b, 0x0, 0x0, 0x0],
        [0xcc, 0x0, 0x0, 0x0],
        [0xe, 0x0, 0x0, 0x0],
        [0x78, 0x0, 0x0, 0x0],
        [-0x25, 0x0, 0x0, 0x0],
        [-0x22, 0x0, 0x0, 0x0],
        [0x59, 0x0, 0x0, 0x0],
        [0xad, 0x0, -0x63, -0x6],
        [-0x11, 0x0, 0x0, 0x0],
        [0x69, 0x0, -0x52, 0x2],
        [0xa0, 0x0, 0x0, 0x0],
        [0x1c, 0x0, 0x0, 0x0],
        [0xac, 0x0, 0x0, 0x0],
        [0xb7, 0x0, 0x0, 0x0],
        [0x83, 0x0, -0x63, 0x7],
        [0x7d, 0x0, -0x49, -0x8],
        [0x2f, 0x0, 0x0, 0x0],
        [0x2a, 0x0, 0x0, 0x0],
        [0x24, 0x0, 0x0, 0x0],
        [0xc7, 0x0, 0x0, 0x0],
        [0x88, 0x0, 0x0, 0x0],
        [0x80, 0x0, 0x0, 0x0],
        [0x61, 0x0, 0x0, 0x0],
        [0x88, 0x0, 0x0, 0x0],
        [-0x1d, 0x0, 0x0, 0x0],
        [0x88, 0x0, 0x0, 0x0],
        [0xab, 0x0, 0x0, 0x0],
        [0x1e, 0x0, 0x0, 0x0],
        [0x2, 0x0, 0x0, 0x0],
        [0x28, 0x0, 0x0, 0x0],
        [0xa1, 0x0, 0x0, 0x0],
        [0xbc, 0x0, 0x0, 0x0],
        [0xc, 0x0, 0x0, 0x0],
        [0x5e, 0x0, 0x0, 0x0],
        [-0x37, 0x0, 0x0, 0x0],
        [-0x29, 0x0, 0x0, 0x0],
        [0x97, 0x0, -0x45, -0x7],
        [0x1d, 0x0, 0x0, 0x0],
        [0x14, 0x0, 0x0, 0x0],
        [0x6d, 0x0, 0x0, 0x0],
        [0x81, 0x0, 0x0, 0x0],
        [-0x9, 0x0, 0x0, 0x0],
        [0x47, 0x0, 0x0, 0x0],
        [-0x14, 0x0, 0x0, 0x0],
        [0x92, 0x0, 0x0, 0x0],
        [-0xe, 0x0, 0x0, 0x0],
        [-0x18, 0x0, 0x0, 0x0],
        [0x17, 0x0, 0x0, 0x0],
        [0x32, 0x0, 0x0, 0x0],
        [0x4c, 0x0, 0x0, 0x0],
        [0xa3, 0x0, 0x0, 0x0],
        [0x37, 0x0, 0x0, 0x0],
        [0x94, 0x0, 0x0, 0x0],
        [0xc, 0x0, 0x0, 0x0],
        [-0x47, 0x0, 0x0, 0x0],
        [0x1e, 0x0, -0x68, 0x7],
        [0x78, 0x0, 0x0, 0x0],
        [0x57, 0x0, 0x0, 0x0],
        [0x54, 0x0, 0x0, 0x0],
        [0x2, 0x0, 0x0, 0x0],
        [0x6a, 0x0, 0x0, 0x0],
        [0x8e, 0x0, 0x0, 0x0],
        [-0x3f, 0x0, 0x0, 0x0],
        [0x65, 0x0, 0x0, 0x0],
        [-0x13, 0x0, -0x69, 0x4],
        [-0x3e, 0x0, 0x0, 0x0],
        [0x8a, 0x0, 0x0, 0x0],
        [-0x28, 0x0, 0x0, 0x0],
        [0x4f, 0x0, 0x0, 0x0],
        [-0x3d, 0x0, 0x0, 0x0],
        [-0x37, 0x0, 0x0, 0x0],
        [0x10, 0x0, 0x0, 0x0],
        [-0x5a, 0x0, 0x0, 0x0],
        [0xb, 0x0, 0x0, 0x0],
        [-0x52, 0x0, 0x0, 0x0],
        [-0x2, 0x0, 0x0, 0x0],
        [0x14, 0x0, 0x0, 0x0],
        [0x23, 0x0, 0x0, 0x0],
        [-0x61, 0x0, 0x0, 0x0],
        [0xf, 0x0, 0x0, 0x0],
        [0x5e, 0x0, 0x0, 0x0],
        [-0x2d, 0x0, 0x0, 0x0],
        [-0x3, 0x0, 0x0, 0x0],
        [0x3f, 0x0, -0x50, -0x2],
        [-0x42, 0x0, 0x0, 0x0],
        [0x46, 0x0, 0x0, 0x0],
        [-0x4d, 0x0, 0x0, 0x0],
        [-0x49, 0x0, 0x0, 0x0],
        [-0x37, 0x0, 0x0, 0x0],
        [-0x77, 0x0, 0x0, 0x0],
        [0x27, 0x0, 0x0, 0x0],
        [0x5e, 0x0, 0x0, 0x0],
        [0x3c, 0x0, 0x0, 0x0],
        [-0xa, 0x0, 0x0, 0x0],
        [-0x10, 0x0, 0x0, 0x0],
        [-0xd, 0x0, 0x0, 0x0],
        [0x18, 0x0, 0x0, 0x0],
        [0x56, 0x0, 0x0, 0x0],
        [0x28, 0x0, 0x0, 0x0],
        [0x16, 0x0, 0x0, 0x0],
        [-0x5e, 0x0, 0x0, 0x0],
        [-0x81, 0x0, 0x0, 0x0],
        [-0x3b, 0x0, 0x0, 0x0],
        [0x6c, 0x0, 0x0, 0x0],
        [-0x18, 0x0, -0x65, -0x1],
        [-0x76, 0x0, 0x0, 0x0],
        [-0x14, 0x0, 0x0, 0x0],
        [0x4f, 0x0, 0x0, 0x0],
        [0x9, 0x0, 0x0, 0x0],
        [-0x9, 0x0, 0x0, 0x0],
        [0x61, 0x0, 0x0, 0x0],
        [-0x6e, 0x0, 0x0, 0x0],
        [-0x18, 0x0, 0x0, 0x0],
        [-0x3d, 0x0, 0x0, 0x0],
        [0x2e, 0x0, 0x0, 0x0],
        [0x26, 0x0, 0x0, 0x0],
        [-0x7f, 0x0, 0x0, 0x0],
        [0xb, 0x0, 0x0, 0x0],
        [0x4b, 0x0, 0x0, 0x0],
        [-0x75, 0x0, 0x0, 0x0],
        [-0x98, 0x0, 0x0, 0x0],
        [-0x7d, 0x0, 0x0, 0x0],
        [-0x4c, 0x0, 0x0, 0x0],
        [0xa, 0x0, 0x0, 0x0],
        [0x39, 0x0, 0x0, 0x0],
        [-0x1c, 0x0, 0x0, 0x0],
        [-0x65, 0x0, 0x0, 0x0],
        [0x2e, 0x0, 0x0, 0x0],
        [0x1d, 0x0, 0x0, 0x0],
        [-0x69, 0x0, 0x0, 0x0],
        [-0x50, 0x0, 0x0, 0x0],
        [0x39, 0x0, 0x0, 0x0],
        [-0x1b, 0x0, 0x0, 0x0],
        [0x45, 0x0, 0x0, 0x0],
        [-0x12, 0x0, 0x0, 0x0],
        [0x40, 0x0, 0x0, 0x0],
        [-0xc, 0x0, 0x0, 0x0],
        [0x48, 0x0, 0x0, 0x0],
        [-0x1e, 0x0, 0x0, 0x0],
        [-0x28, 0x0, 0x0, 0x0],
        [-0x63, 0x0, 0x0, 0x0],
        [-0x8d, 0x0, 0x0, 0x0],
        [-0x1f, 0x0, 0x0, 0x0],
        [-0x57, 0x0, 0x0, 0x0],
        [0x1f, 0x0, 0x0, 0x0],
        [-0x23, 0x0, 0x0, 0x0],
        [0x34, 0x0, 0x0, 0x0],
        [0x10, 0x0, 0x0, 0x0],
        [-0x4c, 0x0, 0x0, 0x0],
        [-0x7b, 0x0, 0x0, 0x0],
        [-0x12, 0x0, -0x6b, -0x1],
        [-0x68, 0x0, 0x0, 0x0],
        [-0x51, 0x0, 0x0, 0x0],
        [-0x33, 0x0, 0x0, 0x0],
        [-0x14, 0x0, 0x0, 0x0],
        [-0x25, 0x0, 0x0, 0x0],
        [0xc, 0x0, 0x0, 0x0],
        [-0x4c, 0x0, -0x44, 0xa],
        [0x15, 0x0, 0x0, 0x0],
        [0x3a, 0x0, 0x0, 0x0],
        [-0x70, 0x0, 0x0, 0x0],
        [-0x61, 0x0, 0x0, 0x0],
        [-0x96, 0x0, 0x0, 0x0],
        [-0x8f, 0x0, 0x0, 0x0],
        [-0x9f, 0x0, 0x0, 0x0],
        [-0x80, 0x0, 0x0, 0x0],
        [-0x23, 0x0, 0x0, 0x0],
        [-0xae, 0x0, 0x0, 0x0],
        [0x26, 0x0, 0x0, 0x0],
        [0xd, 0x0, 0x0, 0x0],
        [-0xc5, 0x0, 0x0, 0x0],
        [-0x3e, 0x0, 0x0, 0x0],
        [0xcf, 0x1, 0x0, 0x0],    
        [-0x7a, 0x0, 0x0, 0x0],
        [-0x2c, 0x0, 0x0, 0x0],
        [-0x31, 0x0, 0x0, 0x0],
        [-0xb, 0x0, 0x0, 0x0],
        [-0xc1, 0x0, 0x0, 0x0],
        [-0x4a, 0x0, 0x0, 0x0],
        [0xd, 0x0, 0x0, 0x0],
        [-0xb7, 0x0, 0x0, 0x0],
        [-0x2a, 0x0, 0x0, 0x0],
        [-0xa, 0x0, 0x0, 0x0],
        [-0x8d, 0x0, 0x0, 0x0],
        [-0xd0, 0x0, 0x0, 0x0],
        [-0xbb, 0x0, 0x0, 0x0],
        [-0x6f, 0x0, 0x0, 0x0],
        [0xe, 0x0, 0x0, 0x0],
        [-0x7e, 0x0, 0x0, 0x0],
        [-0x36, 0x0, 0x0, 0x0],
        [-0x62, 0x0, 0x0, 0x0],
        [-0x8e, 0x0, 0x0, 0x0],
        [-0xf, 0x0, 0x0, 0x0],
        [-0x2a, 0x0, 0x0, 0x0],
        [-0x48, 0x0, 0x0, 0x0],
        [-0x25, 0x0, 0x0, 0x0],
        [-0x6a, 0x0, 0x0, 0x0],
        [-0xdb, 0x0, 0x0, 0x0],
        [-0x14, 0x0, 0x0, 0x0],
        [-0xe9, 0x0, 0x0, 0x0],
        [-0xd6, 0x0, 0x0, 0x0],
        [-0x86, 0x0, 0x0, 0x0],
        [-0xbf, 0x0, 0x0, 0x0],
        [-0x64, 0x0, 0x0, 0x0],
        [-0x44, 0x0, 0x0, 0x0],
        [-0xc9, 0x0, 0x0, 0x0],
        [-0xab, 0x0, 0x0, 0x0],
        [-0xe9, 0x0, 0x0, 0x0],
        [-0x29, 0x0, 0x0, 0x0],
        [-0xdb, 0x0, 0x0, 0x0],
        [-0xc8, 0x0, 0x0, 0x0],
        [-0xbe, 0x0, 0x0, 0x0],
        [-0x79, 0x0, 0x0, 0x0],
        [-0x3f, 0x0, 0x0, 0x0],
        [-0x3c, 0x0, -0x6e, -0x8],
        [-0x8a, 0x0, 0x0, 0x0],
        [-0xb6, 0x0, 0x0, 0x0],
        [-0xf8, 0x0, 0x0, 0x0],
        [-0x4, 0x0, 0x0, 0x0],
        [-0xc8, 0x0, 0x0, 0x0],
        [-0x4d, 0x0, 0x0, 0x0]
    ],
    matrix3 = [
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x1, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0, 0x0, 0x0]
    ];

function display_image(input) {
    var a = [0x0, 0x0, 0x0, 0x0],
        b = [0x0, 0x0, 0x0, 0x0],
        c = [0x0, 0x0, 0x0, 0x0],
        d = [0x0, 0x0, 0x0, 0x0],
        e = [0x41, 0x41, 0x41, 0x41];
    for (var i = 0x0; i < 0x104; ++i) {
        const _0x3d0205 = init_buffer_vertex(context_canvas, new Float32Array(a), a_shader),
              _0x1bbc48 = init_buffer_vertex(context_canvas, new Float32Array(b), b_shader),
              _0x12ff68 = init_buffer_vertex(context_canvas, new Float32Array(c), c_shader),
              _0x358438 = init_buffer_vertex(context_canvas, new Float32Array(d), d_shader),
              _0x31fd87 = init_buffer_vertex(context_canvas, new Float32Array(e), e_shader),
              _0x5efde3 = context_canvas['createTransformFeedback']();
        context_canvas['bindTransformFeedback'](context_canvas['TRANSFORM_FEEDBACK'], _0x5efde3);
        const feedback_shader = init_buffer(context_canvas, a['length'] * 0x4);
        context_canvas['bindBufferBase'](context_canvas['TRANSFORM_FEEDBACK_BUFFER'], 0x0, feedback_shader);
	context_canvas['bindTransformFeedback'](context_canvas['TRANSFORM_FEEDBACK'], null);
	context_canvas['bindBuffer'](context_canvas['ARRAY_BUFFER'], null);
	context_canvas['useProgram'](program12);
	context_canvas['bindVertexArray'](_0x37ea82);
	context_canvas['bindTransformFeedback'](context_canvas['TRANSFORM_FEEDBACK'], _0x5efde3);
	context_canvas['beginTransformFeedback'](context_canvas['POINTS']);
	context_canvas['drawArrays'](context_canvas['POINTS'], 0x0, a['length']);
	context_canvas['endTransformFeedback']();
	context_canvas['bindTransformFeedback'](context_canvas['TRANSFORM_FEEDBACK'], null);
        const f = new Float32Array(a['length']);
        context_canvas['bindBuffer'](context_canvas['ARRAY_BUFFER'], feedback_shader);
	context_canvas['getBufferSubData'](context_canvas['ARRAY_BUFFER'], 0x0, f);
        for (var j = 0x0; j < 0x4; ++j) {
            d[j] = Math['round'](f[j]) % 0x100;
	    e = e['fill'](input['charCodeAt'](d[j]));
	    a[j] = matrix1[d[0x0]][j];
	    b[j] = matrix2[d[0x0]][j];
	    c[j] = matrix3[d[0x0]][j];
        }
        context_canvas['uniform4fv'](s_shader, d);
	context_query_c['clearColor'](0x0, 0x0, 0x0, 0x0), context_query_c['clear'](context_canvas['COLOR_BUFFER_BIT']);
	context_query_c['useProgram'](program34);
	context_query_c['activeTexture'](context_query_c['TEXTURE0'] + 0x1);
	context_query_c['bindTexture'](context_query_c['TEXTURE_2D'], _0x3d5c0d);
	context_query_c['texParameteri'](context_query_c['TEXTURE_2D'], context_query_c['TEXTURE_WRAP_S'], context_query_c['CLAMP_TO_EDGE']);
	context_query_c['texParameteri'](context_query_c['TEXTURE_2D'], context_query_c['TEXTURE_WRAP_T'], context_query_c['CLAMP_TO_EDGE']);
	context_query_c['texParameteri'](context_query_c['TEXTURE_2D'], context_query_c['TEXTURE_MIN_FILTER'], context_query_c['NEAREST']);
	context_query_c['texParameteri'](context_query_c['TEXTURE_2D'], context_query_c['TEXTURE_MAG_FILTER'], context_query_c['NEAREST']);
	// We need to have d[0x1] = 1 to display the good image!
	context_query_c['activeTexture'](context_query_c['TEXTURE0']), context_query_c['bindTexture'](context_query_c['TEXTURE_2D'], array_images[d[0x1]]);
	context_query_c['bindVertexArray'](_0x5745db), context_query_c['drawArrays'](context_query_c['TRIANGLES'], 0x0, 0x6);
    }
}

window['addEventListener']('load', () => {
      document['getElementById']('submitButton')['addEventListener']('click', buttonClick);
  });

  function buttonClick() {
      var key = document['getElementById']('textKey')['value'];
      // We replicate the key up to a length of 0x400
      while (key['length'] < 0x400)
	  key = key + key;
      key = key['substring'](0x0, 0x400);
      display_image(key);
      var cipher = [0xc3, 0xb8, 0xb3, 0x42, 0xb6, 0xc2, 0x1c, 0xa4, 0xce, 0x45, 0x6, 0x3b, 0x1f, 0x1c, 0x66, 0xb1, 0x6c, 0x9a, 0x36, 0xe5, 0x14, 0xbf, 0x18, 0x6e],
	  key_sched = rc4(key, 0x18),
	  flag = '';
      for (var i = 0x0; i < 0x18; ++i) {
	  flag += String['fromCharCode'](cipher[i] ^ key_sched[i]);
      }
      if (flag['startsWith']('grey{')) document['querySelector']('#flag')['textContent'] = flag;
  }

  function rc4(key, len) {
      var a = [],
	  j = 0x0,
	  tmp, permutation = [];
      for (var i = 0x0; i < 0x100; i++) {
	  a[i] = i;
      }
      for (i = 0x0; i < 0x100; i++) {
	  j = (j + a[i] + key['charCodeAt'](i % key['length'])) % 0x100;
	  tmp = a[i];
	  a[i] = a[j];
	  a[j] = tmp;
      }
      i = 0x0, j = 0x0;
      for (var k = 0x0; k < len; k++) {
	  i = (i + 0x1) % 0x100;
	  j = (j + a[i]) % 0x100;
	  tmp = a[i];
	  a[i] = a[j];
	  a[j] = tmp;
	  permutation['push'](a[(a[i] + a[j]) % 0x100]);
      }
      return permutation;
  }
